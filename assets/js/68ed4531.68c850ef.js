"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[914],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(r),u=a,g=m["".concat(c,".").concat(u)]||m[u]||d[u]||o;return r?n.createElement(g,i(i({ref:t},s),{},{components:r})):n.createElement(g,i({ref:t},s))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4299:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={},i="ImageLoader",l={unversionedId:"core/imageloader",id:"core/imageloader",title:"ImageLoader",description:"ImageLoader structure is as follows, build by ImageLoader {}:",source:"@site/docs/core/imageloader.md",sourceDirName:"core",slug:"/core/imageloader",permalink:"/compose-imageloader/docs/core/imageloader",draft:!1,editUrl:"https://github.com/qdsfdhvh/compose-imageloader/tree/main/docs/docs/core/imageloader.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Quick Start",permalink:"/compose-imageloader/docs/core/basic"},next:{title:"ImageRequest",permalink:"/compose-imageloader/docs/core/imagerequest"}},c={},p=[{value:"Interceptor",id:"interceptor",level:2},{value:"Components",id:"components",level:2},{value:"Logger",id:"logger",level:2},{value:"Options",id:"options",level:2}],s={toc:p},m="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"imageloader"},"ImageLoader"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ImageLoader")," structure is as follows, build by ",(0,a.kt)("inlineCode",{parentName:"p"},"ImageLoader {}"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"interface ImageLoader {\n    fun async(request: ImageRequest): Flow<ImageAction>\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ImageAction")," structure is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'sealed interface ImageAction {\n    sealed interface Loading : ImageAction\n    sealed interface Success : ImageAction\n    sealed interface Failure : ImageAction {\n        val error: Throwable\n    }\n}\n\nsealed interface ImageEvent : ImageAction.Loading {\n    data object Start : ImageEvent\n    data object StartWithMemory : ImageEvent\n    data object StartWithDisk : ImageEvent\n    data object StartWithFetch : ImageEvent\n}\n\nsealed interface ImageResult : ImageAction {\n    data class OfBitmap() : ImageResult, ImageAction.Success\n    data class OfImage() : ImageResult, ImageAction.Success\n    data class OfPainter() :ImageResult, ImageAction.Success\n    data class OfError(override val error: Throwable) : ImageResult, ImageAction.Failure\n    data class OfSource() : ImageResult, ImageAction.Failure {\n        override val error: Throwable\n            get() = IllegalStateException("failure to decode image source")\n    }\n}\n')),(0,a.kt)("h2",{id:"interceptor"},"Interceptor"),(0,a.kt)("p",null,"This is the most center feature of ",(0,a.kt)("inlineCode",{parentName:"p"},"ImageLoader"),", The loading of the entire image is implemented by the default 3 + 2 interceptors:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"MappedInterceptor")),(0,a.kt)("li",{parentName:"ul"},"MemoryCacheInterceptors"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"DecodeInterceptor")),(0,a.kt)("li",{parentName:"ul"},"DiskCacheInterceptor"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"FetchInterceptor"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"ImageLoader {\n    interceptor {\n        useDefaultInterceptors = true\n        // add custom interceptor, before of default\n        add(Interceptor)\n    }\n}\n")),(0,a.kt)("h2",{id:"components"},"Components"),(0,a.kt)("p",null,"Add implementations for the ",(0,a.kt)("inlineCode",{parentName:"p"},"MappedInterceptor")," above, and ",(0,a.kt)("inlineCode",{parentName:"p"},"Keyer")," is generating the key value for ",(0,a.kt)("inlineCode",{parentName:"p"},"MemoryCache")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"DiskCache"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"ImageLoader {\n    components {\n        add(Mapper)\n        add(Keyer)\n        add(Fetcher)\n        add(Decoder)\n    }\n}\n")),(0,a.kt)("h2",{id:"logger"},"Logger"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"ImageLoader {\n    imageScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)\n    logger = object : Logger {\n        override fun isLoggable(priority: LogPriority): Boolean = false\n        override fun log(\n            priority: LogPriority,\n            tag: String,\n            data: Any?,\n            throwable: Throwable?,\n            message: String,\n        ) {\n            // print log\n        }\n    }\n}\n")),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'ImageLoader {\n    options {\n        allowInexactSize = false\n        premultipliedAlpha = true\n        retryIfDiskDecodeError = true\n        imageConfig = Options.ImageConfig.ARGB_8888\n        scale = Scale.AUTO\n        memoryCachePolicy = CachePolicy.ENABLED\n        diskCachePolicy = CachePolicy.ENABLED\n        playAnimate = true\n        repeatCount = Options.REPEAT_INFINITE\n        extra {\n            put("key", "value")\n        }\n    }\n}\n')))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[503],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=a.createContext({}),s=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=s(e.components);return a.createElement(m.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=s(t),d=r,g=p["".concat(m,".").concat(d)]||p[d]||u[d]||i;return t?a.createElement(g,o(o({ref:n},l),{},{components:t})):a.createElement(g,o({ref:n},l))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var c={};for(var m in n)hasOwnProperty.call(n,m)&&(c[m]=n[m]);c.originalType=e,c[p]="string"==typeof e?e:r,o[1]=c;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7619:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const i={},o="Quick Start",c={unversionedId:"core/basic",id:"core/basic",title:"Quick Start",description:"Display Image",source:"@site/docs/core/basic.md",sourceDirName:"core",slug:"/core/basic",permalink:"/compose-imageloader/docs/core/basic",draft:!1,editUrl:"https://github.com/qdsfdhvh/compose-imageloader/tree/main/docs/docs/core/basic.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Core",permalink:"/compose-imageloader/docs/core/"},next:{title:"ImageLoader",permalink:"/compose-imageloader/docs/core/imageloader"}},m={},s=[{value:"Display Image",id:"display-image",level:2},{value:"Custom ImageLoader",id:"custom-imageloader",level:2},{value:"in Android",id:"in-android",level:4},{value:"in Jvm",id:"in-jvm",level:4},{value:"in iOS &amp; Macos",id:"in-ios--macos",level:4},{value:"in Js",id:"in-js",level:4}],l={toc:s},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quick-start"},"Quick Start"),(0,r.kt)("h2",{id:"display-image"},"Display Image"),(0,r.kt)("p",null,"Just use it like this for display image:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'// Option 1 on 1.7.0+\nAutoSizeImage(\n    "https://...",\n    contentDescription = "image",\n)\n// Option 2 on 1.7.0+\nAutoSizeBox("https://...") { action ->\n    when (action) {\n        is ImageAction.Success -> {\n            Image(\n                rememberImageSuccessPainter(action),\n                contentDescription = "image",\n            )\n        }\n        is ImageAction.Loading -> {}\n        is ImageAction.Failure -> {}\n    }\n}\n// Option 3\nImage(\n    painter = rememberImagePainter("https://.."),\n    contentDescription = "image",\n)\n')),(0,r.kt)("p",null,"Use priority: ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoSizeImage")," -> ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoSizeBox")," -> ",(0,r.kt)("inlineCode",{parentName:"p"},"rememberImagePainter"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AutoSizeBox")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoSizeImage")," are based on ",(0,r.kt)("strong",{parentName:"p"},"Modifier.Node"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoSizeImage")," \u2248 ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoSizeBox")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"Painter"),"."),(0,r.kt)("p",null,"PS: default ",(0,r.kt)("inlineCode",{parentName:"p"},"Imageloader")," will reload when it's displayed, is not friendly for ",(0,r.kt)("inlineCode",{parentName:"p"},"https")," link, so it is recommended to custom ",(0,r.kt)("inlineCode",{parentName:"p"},"ImageLoader")," and configure the cache."),(0,r.kt)("h2",{id:"custom-imageloader"},"Custom ImageLoader"),(0,r.kt)("p",null,"I configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"Imageloader {}")," on each platform, you also can configure it in the ",(0,r.kt)("inlineCode",{parentName:"p"},"commonMain")," like ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Suwayomi/Tachidesk-JUI/blob/master/presentation/src/commonMain/kotlin/ca/gosyer/jui/ui/base/image/ImageLoaderProvider.kt"},"Tachidesk-JUI"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\nfun Content() {\n    CompositionLocalProvider(\n        LocalImageLoader provides remember { generateImageLoader() },\n    ) {\n        // App\n    }\n}\n")),(0,r.kt)("h4",{id:"in-android"},"in Android"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="MainActivity.kt"',title:'"MainActivity.kt"'},'fun generateImageLoader(): ImageLoader {\n    return ImageLoader {\n        options {\n            androidContext(context)\n        }\n        components {\n            setupDefaultComponents()\n        }\n        interceptor {\n            // cache 100 success image result, without bitmap\n            defaultImageResultMemoryCache()\n            memoryCacheConfig {\n                // Set the max size to 25% of the app\'s available memory.\n                maxSizePercent(context, 0.25)\n            }\n            diskCacheConfig {\n                directory(context.cacheDir.resolve("image_cache").toOkioPath())\n                maxSizeBytes(512L * 1024 * 1024) // 512MB\n            }\n        }\n    }\n}\n')),(0,r.kt)("h4",{id:"in-jvm"},"in Jvm"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun generateImageLoader(): ImageLoader {\n    return ImageLoader {\n        components {\n            setupDefaultComponents()\n        }\n        interceptor {\n            // cache 100 success image result, without bitmap\n            defaultImageResultMemoryCache()\n            memoryCacheConfig {\n                maxSizeBytes(32 * 1024 * 1024) // 32MB\n            }\n            diskCacheConfig {\n                directory(getCacheDir().toOkioPath().resolve("image_cache"))\n                maxSizeBytes(512L * 1024 * 1024) // 512MB\n            }\n        }\n    }\n}\n\n// about currentOperatingSystem, see app\nprivate fun getCacheDir() = when (currentOperatingSystem) {\n    OperatingSystem.Windows -> File(System.getenv("AppData"), "$ApplicationName/cache")\n    OperatingSystem.Linux -> File(System.getProperty("user.home"), ".cache/$ApplicationName")\n    OperatingSystem.MacOS -> File(System.getProperty("user.home"), "Library/Caches/$ApplicationName")\n    else -> throw IllegalStateException("Unsupported operating system")\n}\n')),(0,r.kt)("h4",{id:"in-ios--macos"},"in iOS & Macos"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun generateImageLoader(): ImageLoader {\n    return ImageLoader {\n        components {\n            setupDefaultComponents()\n        }\n        interceptor {\n            // cache 100 success image result, without bitmap\n            defaultImageResultMemoryCache()\n            memoryCacheConfig {\n                maxSizeBytes(32 * 1024 * 1024) // 32MB\n            }\n            diskCacheConfig {\n                directory(getCacheDir().toPath().resolve("image_cache"))\n                maxSizeBytes(512L * 1024 * 1024) // 512MB\n            }\n        }\n    }\n}\n\nprivate fun getCacheDir(): String {\n    return NSSearchPathForDirectoriesInDomains(\n        NSCachesDirectory,\n        NSUserDomainMask,\n        true,\n    ).first() as String\n}\n\n')),(0,r.kt)("h4",{id:"in-js"},"in Js"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun generateImageLoader(): ImageLoader {\n    return ImageLoader {\n        // ...\n        interceptor {\n             memoryCacheConfig {\n                maxSizeBytes(32 * 1024 * 1024) // 32MB\n            }\n            // At the moment I don't know how to configure the disk cache in js either\n            diskCacheConfig(FakeFileSystem().apply { emulateUnix() }) {\n                directory(FileSystem.SYSTEM_TEMPORARY_DIRECTORY)\n                maxSizeBytes(256L * 1024 * 1024) // 256MB\n            }\n        }\n    }\n}\n")))}u.isMDXComponent=!0}}]);